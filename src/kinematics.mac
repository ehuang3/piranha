/* -*- mode: maxima;  -*- */
/* ex: set expandtab: */
/*
 * Copyright (c) 2010-2013, Georgia Tech Research Corporation
 * All rights reserved.
 *
 * Author(s): Neil T. Dantam <ntd@gatech.edu>
 * Georgia Tech Humanoid Robotics Lab
 * Under Direction of Prof. Mike Stilman <mstilman@cc.gatech.edu>
 *
 * This file is provided under the following "BSD-style" License:
 *
 *   Redistribution and use in source and binary forms, with or
 *   without modification, are permitted provided that the following
 *   conditions are met:
 *
 *   * Redistributions of source code must retain the above copyright
 *     notice, this list of conditions and the following disclaimer.
 *
 *   * Redistributions in binary form must reproduce the above
 *     copyright notice, this list of conditions and the following
 *     disclaimer in the documentation and/or other materials provided
 *     with the distribution.
 *
 *   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND
 *   CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
 *   INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
 *   MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 *   DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
 *   CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 *   SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 *   LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
 *   USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED
 *   AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 *   LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
 *   ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 *   POSSIBILITY OF SUCH DAMAGE.
 */

/* FILE: kinematics.mac
 * DESC: Kinematics code for Schunk LWA4 Robot Arm
 * AUTHOR: Neil Dantam
 */

load("/home/ntd/local/share/amino/amino.mac");

/*
 * Origin is at the shoulder point.
 * Consider links between points: shoulder->elbow->writst->ee
 */

/* Lengths from lwa4-dimensions spec sheet */
L_0: 0.300; /* pedestal to shoulder */
L_1: 0.628 - L_0; /* shoulder to elbow */
L_2: 0.951 - L_1 - L_0; /* elbow to wrist */
L_e: 1.0334 - L_2 - L_1 - L_0; /* wrist to E.E end of powerball */


/* Length based lwa3-dimensions [sic] */
L_f : 0.1965; /* Elbow to F/T */

/* Transform to base */
TF0 : matrix(
  [T0(1,1), T0(1,2), T0(1,3), T0(1,4)],
  [T0(2,1), T0(2,2), T0(2,3), T0(2,4)],
  [T0(3,1), T0(3,2), T0(3,3), T0(3,4)],
  [0, 0, 0, 1] );

/* Transform to end-effector */
TFee : matrix(
  [Tee(1,1), Tee(1,2), Tee(1,3), Tee(1,4)],
  [Tee(2,1), Tee(2,2), Tee(2,3), Tee(2,4)],
  [Tee(3,1), Tee(3,2), Tee(3,3), Tee(3,4)],
  [0, 0, 0, 1] );


/* Transform Chain */
/* Negative because rotation is clockwise */
T01 : TF0 . tf_rotx(-q(1))$
T12 : tf_roty(-q(2))$
T23 : tf_rotx(-q(3))$
T34 : tf_tran(L_1,0,0) . tf_roty(-q(4))$
T45 : tf_tran(L_2,0,0) . tf_rotx(-q(5))$
T56 : tf_roty(q(6))$
T67 : tf_rotx(q(7)) . tf_tran(L_e,0,0)$

TT : [T01, T12, T23, T34, T45, T56, T67]$
TA : [
[1,0,0,0], /* 01 */
[0,1,0,0], /* 12 */
[1,0,0,0], /* 23 */
[0,1,0,0], /* 34 */
[1,0,0,0], /* 45 */
[0,-1,0,0], /* 56 */
[-1,0,0,0]  /* 67 */
]$

TP : tf_pyramid(TT)$
tf_e : last(TP) . TFee$

J : spatial_jacobian( TT, TA, TFee)$

with_stdout("kinematics.f",
  /* FK & Jacobian */
  print("      Subroutine lwa4_kin (q, T0, Tee, T, J)"),
  print("      Double Precision q(7)"),
  print("      Double Precision T0(3,4)"),
  print("      Double Precision Tee(3,4)"),
  print("      Double Precision T(3,4)"),
  print("      Double Precision J(6,7)"),
  /* Negative here too -ntd */
  fortran( 'T = submatrix( 4, tf_e ) ),
  fortran( 'J = -J ),
  print("      Return"),
  print("      End")

);
